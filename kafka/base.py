# kafka/base.py
import asyncio
import json

from icecream import ic
from redis.asyncio import Redis
from aiokafka import AIOKafkaProducer, AIOKafkaConsumer
from typing import Any


class KafkaBaseMixin:
    kafka_bootstrap_servers: str
    input_topic: str
    output_topic: str
    redis: Redis

    async def send_message_to_kafka(self, project_id: str, tasks: list[dict]) -> None:
        producer = AIOKafkaProducer(bootstrap_servers=self.kafka_bootstrap_servers)
        await producer.start()
        try:
            send_tasks = []

            for task in tasks:
                task_id = task.get("id")
                data_values = list(task.get("data", {}).values())
                if not data_values:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ.")
                    continue

                message = data_values[0]
                payload = {
                    "source": f"http://localhost:8081{message}",
                    "data": "123123"

                }

                print(f"‚û°Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {payload['source']}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º payload –≤ Redis —Ö–µ—à –ø–æ task_id
                await self.redis.hset(f"task:{task_id}", mapping=payload)

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–¥–∞—á –ø–æ project_id
                await self.redis.incr(f"project:{project_id}:task_count")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka
                send_tasks.append(
                    producer.send_and_wait(self.input_topic, json.dumps(payload).encode("utf-8"))
                )

            await asyncio.gather(*send_tasks)
            print(f"‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Kafka –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_id}")
        finally:
            await producer.stop()


    async def get_messages_from_kafka(self, time_expire: int = 5) -> list[dict[str, str | Any]] | dict[str, str] | None:
        consumer = AIOKafkaConsumer(
            self.output_topic,
            bootstrap_servers=self.kafka_bootstrap_servers,
            value_deserializer=lambda v: json.loads(v.decode("utf-8")),
            auto_offset_reset="earliest",
            enable_auto_commit=True,
            group_id="my-group-id"
        )

        await consumer.start()
        start_time = asyncio.get_event_loop().time()
        try:
            print(f"Started consuming messages from {self.output_topic}")
            async for msg in consumer:
                if asyncio.get_event_loop().time() - start_time > time_expire:
                    print("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
                    return {"status": "ok"}


                try:
                    payload = msg.value
                    ic(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {payload}")
                    with open("output.txt", "w") as f:
                        f.write(json.dumps(payload))
                    return payload
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        finally:
            await consumer.stop()
            print("Consumer stopped")




    async  def expecting_manager(self):
        pass

